/* Base animations */
@keyframes fadeIn {
    from { 
        opacity: 0; 
        transform: translateY(20px); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0); 
    }
}

/* Delete animations */
@keyframes deleteNote {
    0% {
        transform: translateX(0);
        opacity: 1;
    }
    100% {
        transform: translateX(100px);
        opacity: 0;
    }
}

/* Timer animations */
@keyframes gentleScale {
    0% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.03);
    }
    100% {
        transform: scale(1);
    }
}

@keyframes subtleRipple {
    0% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.8);
    }
    50% {
        opacity: 0.1;
    }
    100% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(1.2);
    }
}

/* Heart animations */
@keyframes sizeChange {
    0% {
        transform: scale(0.9);
    }
    50% {
        transform: scale(1.1);
    }
    100% {
        transform: scale(1);
    }
}

/* Animation classes */
.animate-fade-in {
    animation: fadeIn 0.3s ease-out forwards;
    transform-origin: top;
}

.note-item.deleting,
.task-item.deleting {
    animation: deleteNote 0.3s ease-out forwards;
}

.timer-text.time-updated {
    animation: gentleScale 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.timer-text.time-updated::after {
    animation: subtleRipple 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}

.draggable-heart.size-changing {
    animation: sizeChange 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

/* Transition variables (from root) */
:root {
    --transition-bounce: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}


.notes-list,
.tasks-list {
    transition: transform 0.3s ease, margin-top 0.3s ease;
}

.note-input-container,
.task-input-container {
    transition: all 0.3s ease;
}

.delete-note,
.delete-task {
    transition: all 0.2s ease;
}

.add-note-btn,
.add-task-btn {
    transition: transform 0.2s ease;
}

.save-note,
.cancel-note,
.save-task,
.cancel-task {
    transition: transform 0.2s ease;
}

.draggable-heart {
    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                width 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

/* Reset button transitions */
.reset-button {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    box-shadow: 2px 2px 0px rgba(0,0,0,1);
    transition: opacity 0.3s ease-out,
                transform 0.3s ease-out,
                box-shadow 0.3s ease-out;
    pointer-events: auto;
}

.reset-button.hidden {
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    pointer-events: none;
}

/* Reset button hover/active states */
.reset-button:hover {
    transform: translateY(-2px);
    box-shadow: 3px 3px 0px rgba(0,0,0,1);
}

.reset-button:active {
    transform: translateY(1px);
    box-shadow: 1px 1px 0px rgba(0,0,0,1);
}

.main-notes,
.main-tasks {
    transition: var(--transition-smooth);
}

.checkmark {
    transition: all 0.2s ease;
}

/* Hover transitions */
.note-item:hover,
.task-item:hover {
    transform: translateY(-2px);
    transition: transform 0.2s ease;
}

.start-button:hover,
.reset-button:hover {
    transform: translateY(-2px);
    transition: transform 0.2s ease;
}

.start-button:active,
.reset-button:active {
    transform: translateY(1px);
    transition: transform 0.1s ease;
}

/* Scrollbar transitions */
.notes-container::-webkit-scrollbar,
.tasks-container::-webkit-scrollbar {
    transition: all 0.3s ease;
}

/* Container visibility transitions */
.note-input-container.hidden,
.task-input-container.hidden {
    transition: opacity 0.3s ease,
                transform 0.3s ease,
                max-height 0.3s ease,
                margin 0.3s ease,
                padding 0.3s ease;
}

/* Checkbox animations */
@keyframes strikethrough {
    from {
        width: 0;
    }
    to {
        width: 100%;
    }
}

@keyframes reverseStrike {
    from {
        width: 100%;
    }
    to {
        width: 0;
    }
}

/* Task completed animation class */
.task-item.completed .task-text p::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 2px;
    background: #888;
    animation: strikethrough 0.3s ease-out forwards;
}

/* Task uncompleted animation class - modify selector */
.task-item.was-completed .task-text p::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    height: 2px;
    background: #888;
    animation: reverseStrike 0.3s ease-out forwards;
}

/* Adjust the text container */
.task-text p {
    position: relative;
    display: inline-block;
    width: fit-content;
    margin: 0;
    padding-right: 0.5rem;
}

/* Timer pause animation */
@keyframes timerPauseFade {
    from {
        opacity: 0;
        transform: scale(0.95);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* Timer text paused state */
.timer-text.paused {
    animation: timerPauseFade 0.3s ease-out forwards;
}

/* Drag and drop animations */
.note-item {
    cursor: grab;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    z-index: 1;
}

.note-item.dragging {
    cursor: grabbing;
    transform: scale(1.02) rotate(1deg);
    box-shadow: var(--shadow-hover);
    z-index: 1000;
    animation: dragPulse 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

@keyframes dragPulse {
    0% {
        transform: scale(1.02) rotate(1deg);
        box-shadow: var(--shadow-hover);
    }
    50% {
        transform: scale(1.03) rotate(1deg);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }
    100% {
        transform: scale(1.02) rotate(1deg);
        box-shadow: var(--shadow-hover);
    }
}

.note-item.drag-over {
    transform: translateY(15px);
    position: relative;
}

.note-item.drag-over::before {
    content: '';
    position: absolute;
    top: -8px;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--primary-pink);
    border-radius: 3px;
    animation: expandLine 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes expandLine {
    from {
        transform: scaleX(0);
        opacity: 0;
    }
    to {
        transform: scaleX(1);
        opacity: 1;
    }
}

/* Add a subtle lift effect on hover */
.note-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-hover);
}

/* Active grabbing state */
.note-item:active {
    cursor: grabbing;
    transform: scale(1.01);
}
